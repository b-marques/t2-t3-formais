{"version":3,"sources":["actions/index.js","actions/ActionType.js","components/Main.js","components/App.js","reducers/analyserReducer.js","reducers/index.js","serviceWorker.js","logic/lexical.js","logic/syntactic.js","Shape.js","index.js","logo.svg"],"names":["updateCode","text","type","codeAnalysis","symbol_table","Main","_this","this","classes","props","react_default","a","createElement","className","AppBar_default","position","color","Toolbar_default","src","logo","alt","width","Typography_default","variant","title","Grid_default","container","spacing","item","xs","Paper_default","paper","TextField_default","id","label","multiline","value","analyser","lexical","input","onChange","e","preventDefault","target","textField","margin","placeholder","Table_default","table","TableHead_default","TableRow_default","TableCell_default","TableBody_default","error_table","map","element","key","line","syntactic","result","message","line_number","Button_default","button","onClick","slice","token","detail","component","scope","lexema","React","Component","connect","state","analyserReducer","dispatch","bindActionCreators","withStyles","theme","unit","Object","defineProperty","display","borderLeft","padding","breakpoints","up","withTheme","App","components_Main","arguments","length","undefined","action","newState","assign","processInput","analysis","analyserApp","combineReducers","Boolean","window","location","hostname","match","Lexical","classCallCheck","reserved_stuff","alphabet","Set","states","finals","initial","transitions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","symbol","to","err","return","reset_ids","splitted_input","replace","split","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_loop","info","lexeme","characters","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","char","toConsumableArray","has","filter","push","_iterator3","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","ids","Syntactic","T","N","P","head","prods","S","first","follow","each","compute_first_set","compute_follow_set","parsing_table","build_parsing_table","stack","rule","prod","production","add","size","loops","old_follow","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","A","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","entries","_ref3","_ref2","slicedToArray","i","B","Beta","index","BetaFirst","get_first","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","delete","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iterator6","follow_has_changed","FirstBeta","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","as","bs","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","equal_sets","_this2","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","b","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_loop2","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","includes","_iterator15","console","clear","log","stack_symbol","pop","input_element","shift","unshift","items","initial_shape","Synctatic","store","createStore","reducer","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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J,MAAO,QAASC,OAAQ,yBACxC,CAAEG,OAAQ,IAAKJ,MAAO,QAASC,OAAQ,gBACvC,CAAEG,OAAQ,KAAMJ,MAAO,QAASC,OAAQ,4BACxC,CAAEG,OAAQ,KAAMJ,MAAO,QAASC,OAAQ,SACxC,CAAEG,OAAQ,KAAMJ,MAAO,QAASC,OAAQ,aACxC,CAAEG,OAAQ,KAAMJ,MAAO,UAAWC,OAAQ,eAC1C,CAAEG,OAAQ,KAAMJ,MAAO,UAAWC,OAAQ,cAC1C,CAAEG,OAAQ,IAAKJ,MAAO,UAAWC,OAAQ,eACzC,CAAEG,OAAQ,IAAKJ,MAAO,aAAcC,OAAQ,KAE9C5D,KAAKH,aAAe,GACpBG,KAAK8C,YAAc,GAEnB9C,KAAKsG,SAAW,IAAIC,IAAI,CACtB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MAEFvG,KAAKwG,OAAS,IAAID,IAAI,CACpB,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,aACA,MACA,OACA,UAEFvG,KAAKyG,OAAS,IAAIF,IAAI,CACpB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,aACA,MACA,SAEFvG,KAAK0G,QAAU,KACf1G,KAAK2G,YAAc,GAjLF,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAxB,EAAA,IAkLjB,QAAAyB,EAAAC,EAAkBhH,KAAKwG,OAAvBS,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA+B,KAAtBzC,EAAsB4C,EAAAlF,MAC7B7B,KAAK2G,YAAYxC,GAAS,GADG,IAAAkD,GAAA,EAAAC,GAAA,EAAAC,OAAAjC,EAAA,IAE7B,QAAAkC,EAAAC,EAAmBzH,KAAKsG,SAAxBW,OAAAC,cAAAG,GAAAG,EAAAC,EAAAN,QAAAC,MAAAC,GAAA,EAAkC,KAAzBK,EAAyBF,EAAA3F,MAChC7B,KAAK2G,YAAYxC,GAAOuD,GAAU,CAAEC,GAAI,IAAIpB,IAAI,CAAC,YAHtB,MAAAqB,GAAAN,GAAA,EAAAC,EAAAK,EAAA,YAAAP,GAAA,MAAAI,EAAAI,QAAAJ,EAAAI,SAAA,WAAAP,EAAA,MAAAC,KAlLd,MAAAK,GAAAf,GAAA,EAAAC,EAAAc,EAAA,YAAAhB,GAAA,MAAAI,EAAAa,QAAAb,EAAAa,SAAA,WAAAhB,EAAA,MAAAC,GA0LjB9G,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4BgB,GAAK,IAAIpB,IAAI,CAAC,eAC1CvG,KAAK2G,YAAL,KAA4B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K2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAAK2G,YAAL,aAAoCgB,GAAK,IAAIpB,IAAI,CAAC,eAClDvG,KAA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","file":"static/js/main.a0c6762d.chunk.js","sourcesContent":["import * as actionType from \"./ActionType\";\n\nexport const updateCode = text => ({\n  type: actionType.UPDATE_CODE,\n  text: text\n});\n\nexport const codeAnalysis = symbol_table => ({\n  type: actionType.CODE_ANALYSIS,\n  symbol_table: symbol_table\n});\n","export const UPDATE_CODE = \"UPDATE_CODE\";\nexport const CODE_ANALYSIS = \"CODE_ANALYSIS\";\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport { updateCode, codeAnalysis } from \"../actions\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\nimport Button from \"@material-ui/core/Button\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport logo from \"../logo.svg\";\n\nconst styles = theme => ({\n  textField: {\n    width: \"98%\",\n    margin: theme.spacing.unit\n  },\n  paper: {\n    margin: theme.spacing.unit\n  },\n  title: {\n    display: \"none\",\n    borderLeft: \"0.1em solid #225378\",\n    padding: theme.spacing.unit,\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\"\n    }\n  },\n  logo: {\n    // backgroundColor: \"white\",\n    margin: theme.spacing.unit\n  }\n});\n\nclass Main extends React.Component {\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className=\"root\">\n        <AppBar position=\"static\" color=\"default\">\n          <Toolbar>\n            <img src={logo} alt=\"logo\" width=\"200px\" className={classes.logo} />\n            <Typography variant=\"h6\" color=\"inherit\" className={classes.title}>\n              Lexical Analysis\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Grid container spacing={0}>\n          <Grid item xs={6}>\n            <Paper className={classes.paper}>\n              <TextField\n                id=\"outlined-multiline-flexible\"\n                label=\"Input your code here...\"\n                multiline\n                value={this.props.analyser.lexical.input}\n                onChange={e => {\n                  e.preventDefault();\n                  this.props.updateCode(e.target.value);\n                }}\n                className={classes.textField}\n                margin=\"normal\"\n                variant=\"outlined\"\n                placeholder=\"\"\n              />\n            </Paper>\n            <Paper className={classes.paper}>\n              <Table className={classes.table}>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Lexical Error (Line number)</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.props.analyser.lexical.error_table.map(\n                    (element, id) => {\n                      return (\n                        <TableRow key={id}>\n                          <TableCell>{element.line}</TableCell>\n                        </TableRow>\n                      );\n                    }\n                  )}\n                </TableBody>\n              </Table>\n            </Paper>\n            <Paper className={classes.paper}>\n              <Table className={classes.table}>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Info</TableCell>\n                    <TableCell>Line Number</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.props.analyser.syntactic.result.map((element, id) => {\n                    return (\n                      <TableRow key={id}>\n                        <TableCell>{element.message}</TableCell>\n                        <TableCell>{element.line_number}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.button}\n                onClick={e => {\n                  e.preventDefault();\n                  this.props.codeAnalysis(\n                    this.props.analyser.lexical.symbol_table.slice(0)\n                  );\n                }}\n              >\n                <Typography variant=\"subtitle1\">Syntactic Analysis</Typography>\n              </Button>\n            </Paper>\n          </Grid>\n          <Grid item xs={6}>\n            <Paper className={classes.paper}>\n              <Table className={classes.table}>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>ID</TableCell>\n                    <TableCell>Token</TableCell>\n                    <TableCell>Detail</TableCell>\n                    <TableCell>Lexema</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.props.analyser.lexical.symbol_table.map(\n                    (element, id) => {\n                      return (\n                        <TableRow key={id}>\n                          <TableCell>{element.id}</TableCell>\n                          <TableCell>{element.token}</TableCell>\n                          <TableCell>{element.detail}</TableCell>\n                          <TableCell component=\"th\" scope=\"row\">\n                            {element.lexema}\n                          </TableCell>\n                        </TableRow>\n                      );\n                    }\n                  )}\n                </TableBody>\n              </Table>\n            </Paper>\n          </Grid>\n          <Grid item xs={6} />\n        </Grid>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({ analyser: state.analyserReducer });\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      updateCode,\n      codeAnalysis\n    },\n    dispatch\n  );\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles, { withTheme: true })(Main));\n","import React from \"react\";\nimport Main from \"./Main.js\";\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <Main />\n    </div>\n  );\n};\nexport default App;\n","import * as actionType from \"../actions/ActionType\";\n\nconst analyserReducer = (state = 0, action) => {\n  let newState = Object.assign({}, state);\n\n  switch (action.type) {\n    case actionType.UPDATE_CODE:\n      newState.lexical.processInput(action.text);\n\n      return newState;\n\n    case actionType.CODE_ANALYSIS:\n      newState.syntactic.analysis(action.symbol_table);\n\n      return newState;\n\n    default:\n      return newState;\n  }\n};\nexport default analyserReducer;\n","import { combineReducers } from \"redux\";\nimport analyserReducer from \"./analyserReducer\";\n\nconst analyserApp = combineReducers({\n  analyserReducer\n});\n\nexport default analyserApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default class Lexical {\n  constructor(input) {\n    this.id = 1;\n    this.input = input;\n    this.reserved_stuff = [\n      { lexema: \"while\", token: \"RW\", detail: \"\" },\n      { lexema: \"do\", token: \"RW\", detail: \"\" },\n      { lexema: \"break\", token: \"RW\", detail: \"\" },\n      { lexema: \"if\", token: \"RW\", detail: \"\" },\n      { lexema: \"then\", token: \"RW\", detail: \"\" },\n      { lexema: \"else\", token: \"RW\", detail: \"\" },\n      { lexema: \"true\", token: \"RW\", detail: \"\" },\n      { lexema: \"false\", token: \"RW\", detail: \"\" },\n      { lexema: \"basic\", token: \"RW\", detail: \"\" },\n      { lexema: \"*\", token: \"ARITOP\", detail: \"Multiplication\" },\n      { lexema: \"/\", token: \"ARITOP\", detail: \"Division\" },\n      { lexema: \"+\", token: \"ARITOP\", detail: \"Addition\" },\n      { lexema: \"-\", token: \"ARITOP\", detail: \"Subtraction\" },\n      { lexema: \";\", token: \"PUNCTUATION\", detail: \"Semicolon\" },\n      { lexema: \"(\", token: \"PUNCTUATION\", detail: \"Left parenthesis\" },\n      { lexema: \")\", token: \"PUNCTUATION\", detail: \"Right parenthesis\" },\n      { lexema: \"{\", token: \"PUNCTUATION\", detail: \"Left Brace\" },\n      { lexema: \"}\", token: \"PUNCTUATION\", detail: \"Right Brace\" },\n      { lexema: \"[\", token: \"PUNCTUATION\", detail: \"Left Bracket\" },\n      { lexema: \"]\", token: \"PUNCTUATION\", detail: \"Right Bracket\" },\n      { lexema: \"<\", token: \"RELOP\", detail: \"Less than\" },\n      { lexema: \"<=\", token: \"RELOP\", detail: \"Less than or equal to\" },\n      { lexema: \">\", token: \"RELOP\", detail: \"Greater than\" },\n      { lexema: \">=\", token: \"RELOP\", detail: \"Greater than or equal to\" },\n      { lexema: \"==\", token: \"RELOP\", detail: \"Equal\" },\n      { lexema: \"!=\", token: \"RELOP\", detail: \"Not Equal\" },\n      { lexema: \"&&\", token: \"LOGICOP\", detail: \"Logical AND\" },\n      { lexema: \"||\", token: \"LOGICOP\", detail: \"Logical OR\" },\n      { lexema: \"!\", token: \"LOGICOP\", detail: \"Logical NOT\" },\n      { lexema: \"=\", token: \"ASSIGNMENT\", detail: \"\" }\n    ];\n    this.symbol_table = [];\n    this.error_table = [];\n\n    this.alphabet = new Set([\n      \"a\",\n      \"b\",\n      \"c\",\n      \"d\",\n      \"e\",\n      \"f\",\n      \"g\",\n      \"h\",\n      \"i\",\n      \"j\",\n      \"k\",\n      \"l\",\n      \"m\",\n      \"n\",\n      \"o\",\n      \"p\",\n      \"q\",\n      \"r\",\n      \"s\",\n      \"t\",\n      \"u\",\n      \"v\",\n      \"w\",\n      \"x\",\n      \"y\",\n      \"z\",\n      \"A\",\n      \"B\",\n      \"C\",\n      \"D\",\n      \"E\",\n      \"F\",\n      \"G\",\n      \"H\",\n      \"I\",\n      \"J\",\n      \"K\",\n      \"L\",\n      \"M\",\n      \"N\",\n      \"O\",\n      \"P\",\n      \"Q\",\n      \"R\",\n      \"S\",\n      \"T\",\n      \"U\",\n      \"V\",\n      \"W\",\n      \"X\",\n      \"Y\",\n      \"Z\",\n      \"0\",\n      \"1\",\n      \"2\",\n      \"3\",\n      \"4\",\n      \"5\",\n      \"6\",\n      \"7\",\n      \"8\",\n      \"9\",\n      \"*\",\n      \"/\",\n      \"+\",\n      \"-\",\n      \";\",\n      \"(\",\n      \")\",\n      \"{\",\n      \"}\",\n      \"[\",\n      \"]\",\n      \"<\",\n      \">\",\n      \"=\",\n      \"!\",\n      \"&\",\n      \"|\",\n      \".\"\n    ]);\n    this.states = new Set([\n      \"q0\",\n      \"*\",\n      \"/\",\n      \"+\",\n      \"-\",\n      \";\",\n      \"(\",\n      \")\",\n      \"{\",\n      \"}\",\n      \"[\",\n      \"]\",\n      \"<\",\n      \"<=\",\n      \">\",\n      \">=\",\n      \"=\",\n      \"==\",\n      \"!\",\n      \"!=\",\n      \"&\",\n      \"&&\",\n      \"|\",\n      \"||\",\n      \"identifier\",\n      \"num\",\n      \"real\",\n      \"error\"\n    ]);\n    this.finals = new Set([\n      \"*\",\n      \"/\",\n      \"+\",\n      \"-\",\n      \";\",\n      \"(\",\n      \")\",\n      \"{\",\n      \"}\",\n      \"[\",\n      \"]\",\n      \"<\",\n      \"<=\",\n      \">\",\n      \">=\",\n      \"=\",\n      \"==\",\n      \"!\",\n      \"!=\",\n      \"&&\",\n      \"||\",\n      \"identifier\",\n      \"num\",\n      \"real\"\n    ]);\n    this.initial = \"q0\";\n    this.transitions = [];\n    for (let state of this.states) {\n      this.transitions[state] = [];\n      for (let symbol of this.alphabet) {\n        this.transitions[state][symbol] = { to: new Set([\"error\"]) };\n      }\n    }\n\n    // Define transitions from initial state\n    this.transitions[\"q0\"][\"a\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"b\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"c\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"d\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"e\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"f\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"g\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"h\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"i\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"j\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"k\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"l\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"m\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"n\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"o\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"p\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"q\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"r\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"s\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"t\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"u\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"v\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"w\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"x\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"y\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"z\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"A\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"B\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"C\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"D\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"E\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"F\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"G\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"H\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"I\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"J\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"K\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"L\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"M\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"N\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"O\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"P\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"Q\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"R\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"S\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"T\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"U\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"V\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"W\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"X\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"Y\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"Z\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"0\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"1\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"2\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"3\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"4\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"5\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"6\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"7\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"8\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"9\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"*\"].to = new Set([\"*\"]);\n    this.transitions[\"q0\"][\"/\"].to = new Set([\"/\"]);\n    this.transitions[\"q0\"][\"+\"].to = new Set([\"+\"]);\n    this.transitions[\"q0\"][\"-\"].to = new Set([\"-\"]);\n    this.transitions[\"q0\"][\";\"].to = new Set([\";\"]);\n    this.transitions[\"q0\"][\"(\"].to = new Set([\"(\"]);\n    this.transitions[\"q0\"][\")\"].to = new Set([\")\"]);\n    this.transitions[\"q0\"][\"{\"].to = new Set([\"{\"]);\n    this.transitions[\"q0\"][\"}\"].to = new Set([\"}\"]);\n    this.transitions[\"q0\"][\"[\"].to = new Set([\"[\"]);\n    this.transitions[\"q0\"][\"]\"].to = new Set([\"]\"]);\n    this.transitions[\"q0\"][\"<\"].to = new Set([\"<\"]);\n    this.transitions[\"q0\"][\">\"].to = new Set([\">\"]);\n    this.transitions[\"q0\"][\"=\"].to = new Set([\"=\"]);\n    this.transitions[\"q0\"][\"!\"].to = new Set([\"!\"]);\n    this.transitions[\"q0\"][\"&\"].to = new Set([\"&\"]);\n    this.transitions[\"q0\"][\"|\"].to = new Set([\"|\"]);\n    this.transitions[\"q0\"][\".\"].to = new Set([\"error\"]);\n\n    this.transitions[\"<\"][\"=\"].to = new Set([\"<=\"]);\n    this.transitions[\">\"][\"=\"].to = new Set([\">=\"]);\n    this.transitions[\"=\"][\"=\"].to = new Set([\"==\"]);\n    this.transitions[\"!\"][\"=\"].to = new Set([\"!=\"]);\n    this.transitions[\"&\"][\"&\"].to = new Set([\"&&\"]);\n    this.transitions[\"|\"][\"|\"].to = new Set([\"||\"]);\n\n    this.transitions[\"identifier\"][\"a\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"b\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"c\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"d\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"e\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"f\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"g\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"h\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"i\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"j\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"k\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"l\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"m\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"n\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"o\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"p\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"q\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"r\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"s\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"t\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"u\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"v\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"w\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"x\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"y\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"z\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"A\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"B\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"C\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"D\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"E\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"F\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"G\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"H\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"I\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"J\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"K\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"L\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"M\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"N\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"O\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"P\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"Q\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"R\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"S\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"T\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"U\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"V\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"W\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"X\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"Y\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"Z\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"0\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"1\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"2\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"3\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"4\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"5\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"6\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"7\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"8\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"9\"].to = new Set([\"identifier\"]);\n\n    this.transitions[\"num\"][\"0\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"1\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"2\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"3\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"4\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"5\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"6\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"7\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"8\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"9\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\".\"].to = new Set([\"real\"]);\n\n    this.transitions[\"real\"][\"0\"].to = new Set([\"real\"]);\n    this.transitions[\"real\"][\"1\"].to = new Set([\"real\"]);\n    this.transitions[\"real\"][\"2\"].to = new Set([\"real\"]);\n    this.transitions[\"real\"][\"3\"].to = new Set([\"real\"]);\n    this.transitions[\"real\"][\"4\"].to = new Set([\"real\"]);\n    this.transitions[\"real\"][\"5\"].to = new Set([\"real\"]);\n    this.transitions[\"real\"][\"6\"].to = new Set([\"real\"]);\n    this.transitions[\"real\"][\"7\"].to = new Set([\"real\"]);\n    this.transitions[\"real\"][\"8\"].to = new Set([\"real\"]);\n    this.transitions[\"real\"][\"9\"].to = new Set([\"real\"]);\n\n    // console.log(this.transitions);\n  }\n\n  processInput(input) {\n    this.reset_ids();\n\n    this.input = input;\n    // Prepare to analysis, managing whitespaces\n    let splitted_input = input.replace(/[ \\t\\r]+/g, \" \");\n    splitted_input = splitted_input.replace(/\\n/g, \" \\n \");\n    splitted_input = splitted_input.replace(/;/g, \" ; \");\n    splitted_input = splitted_input.replace(/\\(/g, \" ( \");\n    splitted_input = splitted_input.replace(/\\)/g, \" ) \");\n    splitted_input = splitted_input.replace(/\\{/g, \" { \");\n    splitted_input = splitted_input.replace(/\\}/g, \" } \");\n    splitted_input = splitted_input.replace(/\\[/g, \" [ \");\n    splitted_input = splitted_input.replace(/\\]/g, \" ] \");\n\n    // Split by whitespace to read lexeme\n    splitted_input = splitted_input.split(\" \");\n    let line_number = 1;\n\n    for (let lexeme of splitted_input) {\n      let state = \"q0\";\n      let characters = lexeme.split(\"\");\n      for (let char of characters) {\n        if (char === \"\\n\") {\n          line_number++;\n        } else if (this.transitions[state][char] === undefined) {\n          state = \"error\";\n        } else {\n          state = [...this.transitions[state][char].to][0];\n        }\n      }\n\n      if (this.finals.has(state)) {\n        let info;\n        switch (state) {\n          case \"identifier\":\n            info = this.reserved_stuff.filter(e => e.lexema === lexeme);\n            if (info.length === 0) {\n              this.symbol_table.push({\n                id: this.id++,\n                lexema: lexeme,\n                token: \"ID\",\n                detail: \"\",\n                line: line_number\n              });\n            } else {\n              this.symbol_table.push({\n                id: this.id++,\n                token: info[0].token,\n                lexema: info[0].lexema,\n                detail: info[0].detail,\n                line: line_number\n              });\n            }\n            break;\n          case \"num\":\n            this.symbol_table.push({\n              id: this.id++,\n              lexema: lexeme,\n              token: \"NUM\",\n              detail: \"\",\n              line: line_number\n            });\n            break;\n          case \"real\":\n            this.symbol_table.push({\n              id: this.id++,\n              lexema: lexeme,\n              token: \"REAL\",\n              detail: \"\",\n              line: line_number\n            });\n            break;\n          default:\n            info = this.reserved_stuff.filter(e => e.lexema === state);\n            this.symbol_table.push({\n              id: this.id++,\n              token: info[0].token,\n              lexema: info[0].lexema,\n              detail: info[0].detail,\n              line: line_number\n            });\n            break;\n        }\n      } else if (state === \"q0\") {\n        // do nothing\n      } else {\n        this.error_table.push({ line: line_number });\n      }\n    }\n  }\n\n  //   processInput(input) {\n  //     this.reset_ids();\n\n  //     this.input = input;\n  //     // Prepare to analysis, managing whitespaces\n  //     let splitted_input = input.replace(/[ \\t\\r\\n]+/g, \" \");\n  //     splitted_input = splitted_input.replace(/;/g, \" ; \");\n  //     splitted_input = splitted_input.replace(/\\(/g, \" ( \");\n  //     splitted_input = splitted_input.replace(/\\)/g, \" ) \");\n  //     splitted_input = splitted_input.replace(/\\{/g, \" { \");\n  //     splitted_input = splitted_input.replace(/\\}/g, \" } \");\n  //     splitted_input = splitted_input.replace(/\\[/g, \" [ \");\n  //     splitted_input = splitted_input.replace(/\\]/g, \" ] \");\n\n  //     // Split by whitespace to read lexeme\n  //     splitted_input = splitted_input.split(\" \");\n\n  //     for (let lexema of splitted_input) {\n  //       // Check if is reserved word or special character\n  //       let element = this.already_on_reserved_stuff(lexema);\n  //       if (element) {\n  //         let index = this.reserved_stuff.indexOf(element);\n  //         this.symbol_table.push({\n  //           id: this.id++,\n  //           lexema: lexema,\n  //           token: this.reserved_stuff[index].token,\n  //           detail: this.reserved_stuff[index].detail\n  //         });\n  //       } else if (this.is_valid_id(lexema)) {\n  //         let element = this.already_on_symbol_table(lexema);\n  //         if (element) {\n  //           let index = this.symbol_table.indexOf(element);\n  //           this.symbol_table.push({\n  //             id: this.id++,\n  //             lexema: lexema,\n  //             token: this.symbol_table[index].token,\n  //             detail: this.symbol_table[index].detail\n  //           });\n  //         } else {\n  //           this.symbol_table.push({\n  //             id: this.id++,\n  //             lexema: lexema,\n  //             token: \"ID\",\n  //             detail: \"\"\n  //           });\n  //         }\n  //       } else if (this.is_valid_num(lexema)) {\n  //         let element = this.already_on_symbol_table(lexema);\n  //         if (element) {\n  //           let indexficou tankan = this.symbol_table.indexOf(element);\n  //           this.symbol_table.push({\n  //             id: this.id++,\n  //             lexema: lexema,\n  //             token: this.symbol_table[index].token,\n  //             detail: this.symbol_table[index].detail\n  //           });\n  //         } else {\n  //           this.symbol_table.push({\n  //             id: this.id++,\n  //             lexema: lexema,\n  //             token: \"NUM\",\n  //             detail: \"\"\n  //           });\n  //         }\n  //       } else if (this.is_valid_real(lexema)) {\n  //         let element = this.already_on_symbol_table(lexema);\n  //         if (element) {\n  //           let index = this.symbol_table.indexOf(element);\n  //           this.symbol_table.push({\n  //             id: this.id++,\n  //             lexema: lexema,\n  //             token: this.symbol_table[index].token,\n  //             detail: this.symbol_table[index].detail\n  //           });\n  //         } else {\n  //           this.symbol_table.push({\n  //             id: this.id++,\n  //             lexema: lexema,\n  //             token: \"REAL\",\n  //             detail: \"\"\n  //           });\n  //         }\n  //       }\n  //     }\n  //   }\n\n  // already_on_reserved_stuff(lexema) {\n  //   for (let element of this.reserved_stuff) {\n  //     if (element.lexema === lexema) {\n  //       return element;\n  //     }\n  //   }\n  //   return false;\n  // }\n\n  // is_valid_id(lexema) {\n  //   let regex = /^[a-zA-Z]([0-9]|[a-zA-Z])*$/;\n  //   return regex.test(lexema);\n  // }\n\n  // is_valid_num(lexema) {\n  //   let regex = /^([0-9])+$/;\n  //   return regex.test(lexema);\n  // }\n\n  // is_valid_real(lexema) {\n  //   let regex = /^([0-9])+.([0-9])+$/;\n  //   return regex.test(lexema);\n  // }\n\n  // already_on_symbol_table(lexema) {\n  //   for (let element of this.symbol_table) {\n  //     if (element.lexema === lexema) {\n  //       return element;\n  //     }\n  //   }\n  //   return false;\n  // }\n\n  reset_ids() {\n    for (let each of this.reserved_stuff) {\n      each.ids = [];\n    }\n    this.symbol_table = [];\n    this.error_table = [];\n    this.id = 1;\n  }\n}\n","export default class Syntactic {\n  constructor() {\n    this.T = new Set([\n      \"id\",\n      \"while\",\n      \"do\",\n      \"break\",\n      \"if\",\n      \"then\",\n      \"else\",\n      \"true\",\n      \"false\",\n      \"basic\",\n      \"num\",\n      \"real\",\n      \"*\",\n      \"/\",\n      \"+\",\n      \"-\",\n      \";\",\n      \"(\",\n      \")\",\n      \"{\",\n      \"}\",\n      \"[\",\n      \"]\",\n      \"<\",\n      \"<=\",\n      \">\",\n      \">=\",\n      \"==\",\n      \"!=\",\n      \"&&\",\n      \"||\",\n      \"!\",\n      \"=\"\n    ]);\n    this.N = new Set([\n      \"<program>\",\n      \"<block>\",\n      \"<decls>\",\n      \"<decl>\",\n      \"<type>\",\n      \"<types>\",\n      \"<stmts>\",\n      \"<stmt>\",\n      \"<openif>\",\n      \"<loc>\",\n      \"<locs>\",\n      \"<bool>\",\n      \"<boolx>\",\n      \"<join>\",\n      \"<joinx>\",\n      \"<equality>\",\n      \"<equalityx>\",\n      \"<rel>\",\n      \"<relx>\",\n      \"<expr>\",\n      \"<exprs>\",\n      \"<term>\",\n      \"<terms>\",\n      \"<unary>\",\n      \"<factor>\"\n    ]);\n    this.P = [\n      {\n        head: \"<program>\",\n        prods: [[\"<block>\"]]\n      },\n      {\n        head: \"<block>\",\n        prods: [[\"{\", \"<decls>\", \"<stmts>\", \"}\"]]\n      },\n      {\n        head: \"<decls>\",\n        prods: [[\"&\"], [\"<decl>\", \"<decls>\"]]\n      },\n      {\n        head: \"<decl>\",\n        prods: [[\"<type>\", \"id\", \";\"]]\n      },\n      {\n        head: \"<type>\",\n        prods: [[\"basic\", \"<types>\"]]\n      },\n      {\n        head: \"<types>\",\n        prods: [[\"&\"], [\"[\", \"num\", \"]\", \"<types>\"]]\n      },\n      {\n        head: \"<stmts>\",\n        prods: [[\"&\"], [\"<stmt>\", \"<stmts>\"]]\n      },\n      {\n        head: \"<stmt>\",\n        prods: [\n          [\"<loc>\", \"=\", \"<bool>\", \";\"],\n          [\"<openif>\"],\n          [\"while\", \"(\", \"<bool>\", \")\", \"<stmt>\"],\n          [\"do\", \"<stmt>\", \"while\", \"(\", \"<bool>\", \")\", \";\"],\n          [\"break\", \";\"],\n          [\"<block>\"]\n        ]\n      },\n      {\n        head: \"<openif>\",\n        prods: [[\"if\", \"(\", \"<bool>\", \")\", \"then\", \"<stmt>\", \"else\", \"<stmt>\"]]\n      },\n      {\n        head: \"<loc>\",\n        prods: [[\"id\", \"<locs>\"]]\n      },\n      {\n        head: \"<locs>\",\n        prods: [[\"[\", \"<bool>\", \"]\", \"<locs>\"], [\"&\"]]\n      },\n      {\n        head: \"<bool>\",\n        prods: [[\"<join>\", \"<boolx>\"]]\n      },\n      {\n        head: \"<boolx>\",\n        prods: [[\"||\", \"<bool>\"], [\"&\"]]\n      },\n      {\n        head: \"<join>\",\n        prods: [[\"<equality>\", \"<joinx>\"]]\n      },\n      {\n        head: \"<joinx>\",\n        prods: [[\"&&\", \"<join>\"], [\"&\"]]\n      },\n      {\n        head: \"<equality>\",\n        prods: [[\"<rel>\", \"<equalityx>\"]]\n      },\n      {\n        head: \"<equalityx>\",\n        prods: [[\"&\"], [\"!=\", \"<equality>\"], [\"==\", \"<equality>\"]]\n      },\n      {\n        head: \"<rel>\",\n        prods: [[\"<expr>\", \"<relx>\"]]\n      },\n      {\n        head: \"<relx>\",\n        prods: [\n          [\"<\", \"<expr>\"],\n          [\"<=\", \"<expr>\"],\n          [\">\", \"<expr>\"],\n          [\">=\", \"<expr>\"],\n          [\"&\"]\n        ]\n      },\n      {\n        head: \"<expr>\",\n        prods: [[\"<term>\", \"<exprs>\"]]\n      },\n      {\n        head: \"<exprs>\",\n        prods: [[\"+\", \"<term>\", \"<exprs>\"], [\"-\", \"<term>\", \"<exprs>\"], [\"&\"]]\n      },\n      {\n        head: \"<term>\",\n        prods: [[\"<unary>\", \"<terms>\"]]\n      },\n      {\n        head: \"<terms>\",\n        prods: [[\"*\", \"<unary>\", \"<terms>\"], [\"/\", \"<unary>\", \"<terms>\"], [\"&\"]]\n      },\n      {\n        head: \"<unary>\",\n        prods: [[\"!\", \"<unary>\"], [\"-\", \"<unary>\"], [\"<factor>\"]]\n      },\n      {\n        head: \"<factor>\",\n        prods: [\n          [\"(\", \"<bool>\", \")\"],\n          [\"<loc>\"],\n          [\"num\"],\n          [\"real\"],\n          [\"true\"],\n          [\"false\"]\n        ]\n      }\n    ];\n    this.S = \"<program>\";\n    this.first = [];\n    this.follow = [];\n\n    for (let each of this.N) {\n      this.first[each] = new Set();\n      this.follow[each] = new Set();\n    }\n\n    for (let head of this.N) {\n      this.compute_first_set(head);\n    }\n\n    this.compute_follow_set();\n\n    this.parsing_table = [];\n    this.build_parsing_table();\n    this.stack = [];\n    this.result = [{ message: \"\", line_number: \"\" }];\n  }\n\n  compute_first_set(head) {\n    let rule = this.P.filter(prod => prod.head === head);\n    for (let production of rule[0].prods) {\n      // If is a terminal add to first set of head\n      if (this.T.has(production[0]) || production[0] === \"&\") {\n        this.first[head].add(production[0]);\n      } else {\n        if (this.first[production[0]].size !== 0) {\n          for (let each of this.first[production[0]]) {\n            this.first[head].add(each);\n          }\n        } else {\n          this.compute_first_set(production[0]);\n          this.compute_first_set(head);\n        }\n      }\n    }\n  }\n  compute_follow_set() {\n    // 1 – Se A é o símbolo inicial da gramática -> $ ∈ Follow(A)\n    this.follow[this.S].add(\"$\");\n\n    let loops = 0;\n    do {\n      let old_follow = [];\n      for (let each of this.N) {\n        old_follow[each] = new Set([...this.follow[each]]);\n      }\n\n      for (let A of this.N) {\n        let rule = this.P.filter(prod => prod.head === A);\n        for (let production of rule[0].prods) {\n          for (const [i, element] of production.entries()) {\n            let B = element;\n            let Beta = new Set();\n            let index = i + 1;\n            while (production[index] !== undefined) {\n              Beta.add(production[index]);\n              index++;\n            }\n            let BetaFirst = Beta.size > 0 ? this.get_first(Beta) : new Set();\n\n            // 2 – Se A -> α B β ∈ P ∧ β ≠ ε -> adicione first(β) em Follow(B)\n            if (loops === 0) {\n              if (this.N.has(B) && (Beta.size > 0 && [...Beta][0] !== \"&\")) {\n                for (let each of BetaFirst) {\n                  this.follow[B].add(each);\n                }\n                this.follow[B].delete(\"&\");\n              }\n            }\n\n            // 3 – Se A -> αB (ou A->αBβ, onde ε ∈ First(β)) ∈ P -> adicione Follow(A) em Follow(B)\n            if (this.N.has(B) && (Beta.size === 0 || BetaFirst.has(\"&\"))) {\n              for (let follow of this.follow[A]) {\n                this.follow[B].add(follow);\n              }\n              this.follow[B].delete(\"&\");\n            }\n          }\n        }\n      }\n\n      loops++;\n\n      if (!this.follow_has_changed(old_follow)) break;\n    } while (true);\n  }\n\n  get_first(Beta) {\n    if (this.T.has([...Beta][0])) {\n      return new Set([[...Beta][0]]);\n    }\n    let FirstBeta = new Set();\n    let i = 0;\n    while ([...Beta][i] !== undefined) {\n      if (this.T.has([...Beta][i])) {\n        FirstBeta.add([...Beta][i]);\n        FirstBeta.delete(\"&\");\n        return FirstBeta;\n      }\n      for (let each of this.first[[...Beta][i]]) {\n        FirstBeta.add(each);\n      }\n      if (!this.first[[...Beta][i]].has(\"&\")) {\n        FirstBeta.delete(\"&\");\n        return FirstBeta;\n      }\n      i++;\n    }\n    return FirstBeta;\n  }\n\n  equal_sets(as, bs) {\n    if (as.size !== bs.size) return false;\n    for (var a of as) if (!bs.has(a)) return false;\n    return true;\n  }\n\n  follow_has_changed(old_follow) {\n    for (let each of this.N) {\n      if (!this.equal_sets(old_follow[each], this.follow[each])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  build_parsing_table() {\n    for (let A of this.N) {\n      this.parsing_table[A] = [];\n      for (let b of this.T) {\n        this.parsing_table[A][b] = { prod: [\"<erro>\"] };\n      }\n      this.parsing_table[A][\"$\"] = { prod: [\"<erro>\"] };\n    }\n    for (let A of this.N) {\n      for (let a of this.first[A]) {\n        if (a === \"&\") {\n          for (let b of this.follow[A]) {\n            this.parsing_table[A][b].prod = [\"ε\"];\n          }\n        } else {\n          let rule = this.P.filter(prod => prod.head === A);\n          for (let production of rule[0].prods) {\n            if (production[0] === a) {\n              this.parsing_table[A][a].prod = production;\n            } else if (this.N.has(production[0])) {\n              for (let each of this.first[production[0]]) {\n                if (each !== \"&\") {\n                  if (this.parsing_table[A][each].prod.includes(\"<erro>\")) {\n                    this.parsing_table[A][each].prod = production;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  analysis(symbol_table) {\n    console.clear();\n    console.log(this.parsing_table);\n    if (!symbol_table.length) {\n      this.result[0].message = \"Empty symbol table!\";\n      this.result[0].line_number = \"\";\n      return;\n    }\n    this.result = [{ message: \"\", line_number: \"\" }];\n    this.stack = [\"$\", \"<program>\"];\n    symbol_table.push({\n      id: symbol_table[symbol_table.length - 1].id + 1,\n      token: \"END\",\n      lexema: \"$\",\n      detail: \"\",\n      line: symbol_table[symbol_table.length - 1].line_number\n    });\n\n    while (symbol_table.length > 0) {\n      console.log(this.stack);\n\n      let stack_symbol = this.stack.pop();\n      if (stack_symbol === \"ε\") {\n        continue;\n      }\n\n      let input_element = symbol_table.shift();\n\n      if (stack_symbol === \"$\" && symbol_table.length) {\n        this.result[0].message = \"Syntactic error!\";\n        this.result[0].line_number = input_element.line;\n        return;\n      }\n\n      switch (input_element.token) {\n        case \"ID\":\n          input_element.lexema = \"id\";\n          break;\n        case \"NUM\":\n          input_element.lexema = \"num\";\n          break;\n        case \"REAL\":\n          input_element.lexema = \"real\";\n          break;\n        default:\n          break;\n      }\n\n      if (input_element.lexema === stack_symbol) {\n        continue;\n      }\n      if (\n        this.parsing_table[stack_symbol][input_element.lexema].prod.includes(\n          \"<erro>\"\n        )\n      ) {\n        this.result[0].message = \"Syntactic error!\";\n        this.result[0].line_number = input_element.line;\n        return;\n      } else {\n        symbol_table.unshift(input_element);\n\n        let items = this.parsing_table[stack_symbol][input_element.lexema].prod;\n        let i = items.length;\n        while (i--) {\n          this.stack.push(items[i]);\n        }\n      }\n    }\n    this.result[0].message = \"Success!\";\n    this.result[0].line_number = \"\";\n    return;\n  }\n}\n","import Lexical from \"./logic/lexical\";\nimport Synctatic from \"./logic/syntactic\";\n// import Grammar from \"./logic/Grammar\";\n\nexport const initial_shape = {\n  analyserReducer: {\n    lexical: new Lexical(`{\n  basic counter;\n  basic [ 5 ] array;\n  basic [ 5 ][ 2 ] array2D;\n  basic [ 5 ][ 2 ][ 2 ] array3D;\n  \n  while ( true ) \n      counter =   5 * 2;\n  \n  do\n      aux = false;\n  while ( 5 != 5.0000000001);\n  \n  if ( true ) then\n  aux = false ;\n  else \n  nao = 6 ;\n  \n        { novoBloco = 5;\n          while (true != false)\n                  teste = true || false;\n                  teste2 = 5 && 7;\n                  id  =  -  ! 5.0003;\n        }\n  } `),\n    syntactic: new Synctatic()\n  }\n};\n","import \"./index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./reducers\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { initial_shape } from \"./Shape\";\n\nconst store = createStore(reducer, initial_shape);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.ad3d725a.svg\";"],"sourceRoot":""}